#include <iostream>
#include <string>
#include <cstring>
#include <set>
#include <vector>
#include <algorithm>

#define ALPHABETSIZE 26

using namespace std;

vector<string> dominant(vector<string> &input) {
    int n = input.size();
    vector<vector<int>> char_count(n, vector<int>(ALPHABETSIZE, 0));
    for (int i = 0; i < n; i++) {
        for (char c : input[i]) {
            int remap = c - 'a';
            char_count[i][remap]++;
        }
    }
    vector<bool> dominant(n, true);
    for (int i = 0; i < n; i++) {
        if (!dominant[i]) {
            continue;
        }
        vector<int> &cc = char_count[i];
        bool dominated = false;
        for (int j = 0; j < n; j++) {
            if (!dominant[j]) {
                continue;
            }
            if (input[i].size() <= input[j].size()) {
                continue;
            }
            dominated = true;
            for (char c = 'a'; c <= 'z'; ++c) {
                int count1 = cc[(int)(c - 'a')];
                int count2 = char_count[j][(int)(c - 'a')];
                if (count2 > count1) {
                    dominated = false;
                    break;
                }
            }
            if (dominated) {
                dominant[j] = false;
            }
        }
    }
    vector<string> ans;
    for (int i = 0; i < n; i++) {
        if (dominant[i]) {
            ans.push_back(input[i]);
        }
    }
    sort(ans.begin(), ans.end());
    return ans;
}

int main()
{
    vector<string> input;
    char str[20];
    while (1 == scanf("%s\n", str)) {
        input.push_back(str);
    }
    auto ans = dominant(input);
    for (string& s : ans) {
        printf("%s\n", s.c_str());
    }
}
